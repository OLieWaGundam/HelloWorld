apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: "findbugs"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.wxj.hello"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

// 定义生成文件目录
def checkStyleReportPath = "${project.rootDir}/app/build/reports/"

// 在clean时候，自动删除原先生成报告
clean.doFirst {
    delete checkStyleReportPath
}


task checkStyle(type: Checkstyle) {
    source 'src'
    configFile file("${project.rootDir}/config/checkstyle.xml") // 配置样式
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    ignoreFailures true // 配置是否忽略失败

    // 自定义报告生成路径
    reports {
        html {
            destination "${project.rootDir}/app/build/reports/checkstyle-result.html"
        }
        xml {
            destination "${project.rootDir}/app/build/reports/checkstyle-result.xml"
        }
    }
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            // 检查生成报告中是否有错误
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ") && !checkstyleTask.ignoreFailures) {
                throw new GradleException("There were checkstyle errors! For more info check $outputFile")
            }
        }
    }
}


task findbugs(type: FindBugs) {
    ignoreFailures = true //有警告错误的时候也是允许构建
    effort = "default"
    reportLevel = "high"//报告的级别，Low,Medium,High一般来说我们首先关注的是高级别的报告，再关注低一级别的报告
    excludeFilter = new File("${project.rootDir}/config/findbugs-filter.xml")//配置文件
    classes = files("${project.rootDir}/app/build/intermediates/classes")//classe文件夹地址
    source = fileTree('src/main/java/')//源代码文件地址
    classpath = files()
    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination "${project.rootDir}/app/build/reports/findbugs.xml"
        }
        html {
            destination "${project.rootDir}/app/build/reports/findbugs.html"
        }
    }
}
